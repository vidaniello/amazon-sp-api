/*
 * Selling Partner API for Orders
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.model.orders;

import java.util.Objects;
import java.util.Arrays;
import com.amazon.model.orders.ItemIdentifier;
import com.amazon.model.orders.Money;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Changes required for the approval. Each approval type defines the allowed changes valid sub-set in its specific schema.
 */
@ApiModel(description = "Changes required for the approval. Each approval type defines the allowed changes valid sub-set in its specific schema.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-05-11T14:53:04.283+02:00")
public class ItemApprovalActionChanges {
  @SerializedName("ItemPrice")
  private Money itemPrice = null;

  @SerializedName("Quantity")
  private Integer quantity = null;

  @SerializedName("SubstitutedBy")
  private ItemIdentifier substitutedBy = null;

  public ItemApprovalActionChanges itemPrice(Money itemPrice) {
    this.itemPrice = itemPrice;
    return this;
  }

   /**
   * Price to be charged to the customer for each unit of the item. If substitutedBy is specified, this value applies to the substitution item.
   * @return itemPrice
  **/
  @ApiModelProperty(value = "Price to be charged to the customer for each unit of the item. If substitutedBy is specified, this value applies to the substitution item.")
  public Money getItemPrice() {
    return itemPrice;
  }

  public void setItemPrice(Money itemPrice) {
    this.itemPrice = itemPrice;
  }

  public ItemApprovalActionChanges quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Quantity approved. If substitutedBy is specified, this value applies to the substitution item.
   * @return quantity
  **/
  @ApiModelProperty(value = "Quantity approved. If substitutedBy is specified, this value applies to the substitution item.")
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public ItemApprovalActionChanges substitutedBy(ItemIdentifier substitutedBy) {
    this.substitutedBy = substitutedBy;
    return this;
  }

   /**
   * Identifier of the item to substitute this item in the order.
   * @return substitutedBy
  **/
  @ApiModelProperty(value = "Identifier of the item to substitute this item in the order.")
  public ItemIdentifier getSubstitutedBy() {
    return substitutedBy;
  }

  public void setSubstitutedBy(ItemIdentifier substitutedBy) {
    this.substitutedBy = substitutedBy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemApprovalActionChanges itemApprovalActionChanges = (ItemApprovalActionChanges) o;
    return Objects.equals(this.itemPrice, itemApprovalActionChanges.itemPrice) &&
        Objects.equals(this.quantity, itemApprovalActionChanges.quantity) &&
        Objects.equals(this.substitutedBy, itemApprovalActionChanges.substitutedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemPrice, quantity, substitutedBy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemApprovalActionChanges {\n");
    
    sb.append("    itemPrice: ").append(toIndentedString(itemPrice)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    substitutedBy: ").append(toIndentedString(substitutedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

