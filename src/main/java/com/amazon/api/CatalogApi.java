/*
 * Selling Partner API for Catalog Items
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.api;

import com.amazon.invoker.ApiCallback;
import com.amazon.invoker.ApiClient;
import com.amazon.invoker.ApiException;
import com.amazon.invoker.ApiResponse;
import com.amazon.invoker.Configuration;
import com.amazon.invoker.Pair;
import com.amazon.invoker.ProgressRequestBody;
import com.amazon.invoker.ProgressResponseBody;
import com.amazon.invoker.StringUtil;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.amazon.model.catalogitems.GetCatalogItemResponse;
import com.amazon.model.catalogitems.ListCatalogCategoriesResponse;
import com.amazon.model.catalogitems.ListCatalogItemsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.amazon.SellingPartnerAPIAA.AWSAuthenticationCredentials;
import com.amazon.SellingPartnerAPIAA.AWSAuthenticationCredentialsProvider;
import com.amazon.SellingPartnerAPIAA.AWSAuthenticationCustomCredentialsProvider;
import com.amazon.SellingPartnerAPIAA.AWSSigV4Signer;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.RateLimitConfiguration;

public class CatalogApi {
    private ApiClient apiClient;

    CatalogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCatalogItem
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for the item. (required)
     * @param asin The Amazon Standard Identification Number (ASIN) of the item. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCatalogItemCall(String marketplaceId, String asin, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/v0/items/{asin}"
            .replaceAll("\\{" + "asin" + "\\}", apiClient.escapeString(asin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("MarketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCatalogItemValidateBeforeCall(String marketplaceId, String asin, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException("Missing the required parameter 'marketplaceId' when calling getCatalogItem(Async)");
        }
        
        // verify the required parameter 'asin' is set
        if (asin == null) {
            throw new ApiException("Missing the required parameter 'asin' when calling getCatalogItem(Async)");
        }
        

        com.squareup.okhttp.Call call = getCatalogItemCall(marketplaceId, asin, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Effective September 30, 2022, the &#x60;getCatalogItem&#x60; operation will no longer be available in the Selling Partner API for Catalog Items v0. This operation is available in the latest version of the [Selling Partner API for Catalog Items v2022-04-01](doc:catalog-items-api-v2022-04-01-reference). Integrations that rely on this operation should migrate to the latest version to avoid service disruption.  _Note:_ The [&#x60;listCatalogCategories&#x60;](#get-catalogv0categories) operation is not being deprecated and you can continue to make calls to it.
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for the item. (required)
     * @param asin The Amazon Standard Identification Number (ASIN) of the item. (required)
     * @return GetCatalogItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetCatalogItemResponse getCatalogItem(String marketplaceId, String asin) throws ApiException {
        ApiResponse<GetCatalogItemResponse> resp = getCatalogItemWithHttpInfo(marketplaceId, asin);
        return resp.getData();
    }

    /**
     * 
     * Effective September 30, 2022, the &#x60;getCatalogItem&#x60; operation will no longer be available in the Selling Partner API for Catalog Items v0. This operation is available in the latest version of the [Selling Partner API for Catalog Items v2022-04-01](doc:catalog-items-api-v2022-04-01-reference). Integrations that rely on this operation should migrate to the latest version to avoid service disruption.  _Note:_ The [&#x60;listCatalogCategories&#x60;](#get-catalogv0categories) operation is not being deprecated and you can continue to make calls to it.
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for the item. (required)
     * @param asin The Amazon Standard Identification Number (ASIN) of the item. (required)
     * @return ApiResponse&lt;GetCatalogItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetCatalogItemResponse> getCatalogItemWithHttpInfo(String marketplaceId, String asin) throws ApiException {
        com.squareup.okhttp.Call call = getCatalogItemValidateBeforeCall(marketplaceId, asin, null, null);
        Type localVarReturnType = new TypeToken<GetCatalogItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Effective September 30, 2022, the &#x60;getCatalogItem&#x60; operation will no longer be available in the Selling Partner API for Catalog Items v0. This operation is available in the latest version of the [Selling Partner API for Catalog Items v2022-04-01](doc:catalog-items-api-v2022-04-01-reference). Integrations that rely on this operation should migrate to the latest version to avoid service disruption.  _Note:_ The [&#x60;listCatalogCategories&#x60;](#get-catalogv0categories) operation is not being deprecated and you can continue to make calls to it.
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for the item. (required)
     * @param asin The Amazon Standard Identification Number (ASIN) of the item. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCatalogItemAsync(String marketplaceId, String asin, final ApiCallback<GetCatalogItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCatalogItemValidateBeforeCall(marketplaceId, asin, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetCatalogItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCatalogCategories
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for the item. (required)
     * @param ASIN The Amazon Standard Identification Number (ASIN) of the item. (optional)
     * @param sellerSKU Used to identify items in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCatalogCategoriesCall(String marketplaceId, String ASIN, String sellerSKU, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/v0/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("MarketplaceId", marketplaceId));
        if (ASIN != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ASIN", ASIN));
        if (sellerSKU != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SellerSKU", sellerSKU));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCatalogCategoriesValidateBeforeCall(String marketplaceId, String ASIN, String sellerSKU, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException("Missing the required parameter 'marketplaceId' when calling listCatalogCategories(Async)");
        }
        

        com.squareup.okhttp.Call call = listCatalogCategoriesCall(marketplaceId, ASIN, sellerSKU, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for the item. (required)
     * @param ASIN The Amazon Standard Identification Number (ASIN) of the item. (optional)
     * @param sellerSKU Used to identify items in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)
     * @return ListCatalogCategoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListCatalogCategoriesResponse listCatalogCategories(String marketplaceId, String ASIN, String sellerSKU) throws ApiException {
        ApiResponse<ListCatalogCategoriesResponse> resp = listCatalogCategoriesWithHttpInfo(marketplaceId, ASIN, sellerSKU);
        return resp.getData();
    }

    /**
     * 
     * Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for the item. (required)
     * @param ASIN The Amazon Standard Identification Number (ASIN) of the item. (optional)
     * @param sellerSKU Used to identify items in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)
     * @return ApiResponse&lt;ListCatalogCategoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListCatalogCategoriesResponse> listCatalogCategoriesWithHttpInfo(String marketplaceId, String ASIN, String sellerSKU) throws ApiException {
        com.squareup.okhttp.Call call = listCatalogCategoriesValidateBeforeCall(marketplaceId, ASIN, sellerSKU, null, null);
        Type localVarReturnType = new TypeToken<ListCatalogCategoriesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for the item. (required)
     * @param ASIN The Amazon Standard Identification Number (ASIN) of the item. (optional)
     * @param sellerSKU Used to identify items in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCatalogCategoriesAsync(String marketplaceId, String ASIN, String sellerSKU, final ApiCallback<ListCatalogCategoriesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCatalogCategoriesValidateBeforeCall(marketplaceId, ASIN, sellerSKU, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListCatalogCategoriesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCatalogItems
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned. (required)
     * @param query Keyword(s) to use to search for items in the catalog. Example: &#39;harry potter books&#39;. (optional)
     * @param queryContextId An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items. (optional)
     * @param sellerSKU Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)
     * @param UPC A 12-digit bar code used for retail packaging. (optional)
     * @param EAN A European article number that uniquely identifies the catalog item, manufacturer, and its attributes. (optional)
     * @param ISBN The unique commercial book identifier used to identify books internationally. (optional)
     * @param JAN A Japanese article number that uniquely identifies the product, manufacturer, and its attributes. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCatalogItemsCall(String marketplaceId, String query, String queryContextId, String sellerSKU, String UPC, String EAN, String ISBN, String JAN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/v0/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("MarketplaceId", marketplaceId));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Query", query));
        if (queryContextId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("QueryContextId", queryContextId));
        if (sellerSKU != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SellerSKU", sellerSKU));
        if (UPC != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UPC", UPC));
        if (EAN != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EAN", EAN));
        if (ISBN != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ISBN", ISBN));
        if (JAN != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("JAN", JAN));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCatalogItemsValidateBeforeCall(String marketplaceId, String query, String queryContextId, String sellerSKU, String UPC, String EAN, String ISBN, String JAN, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException("Missing the required parameter 'marketplaceId' when calling listCatalogItems(Async)");
        }
        

        com.squareup.okhttp.Call call = listCatalogItemsCall(marketplaceId, query, queryContextId, sellerSKU, UPC, EAN, ISBN, JAN, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Effective September 30, 2022, the &#x60;listCatalogItems&#x60; operation will no longer be available in the Selling Partner API for Catalog Items v0. As an alternative, &#x60;searchCatalogItems&#x60; is available in the latest version of the [Selling Partner API for Catalog Items v2022-04-01](doc:catalog-items-api-v2022-04-01-reference). Integrations that rely on the &#x60;listCatalogItems&#x60; operation should migrate to the &#x60;searchCatalogItems&#x60;operation to avoid service disruption.  _Note:_ The [&#x60;listCatalogCategories&#x60;](#get-catalogv0categories) operation is not being deprecated and you can continue to make calls to it.
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned. (required)
     * @param query Keyword(s) to use to search for items in the catalog. Example: &#39;harry potter books&#39;. (optional)
     * @param queryContextId An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items. (optional)
     * @param sellerSKU Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)
     * @param UPC A 12-digit bar code used for retail packaging. (optional)
     * @param EAN A European article number that uniquely identifies the catalog item, manufacturer, and its attributes. (optional)
     * @param ISBN The unique commercial book identifier used to identify books internationally. (optional)
     * @param JAN A Japanese article number that uniquely identifies the product, manufacturer, and its attributes. (optional)
     * @return ListCatalogItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListCatalogItemsResponse listCatalogItems(String marketplaceId, String query, String queryContextId, String sellerSKU, String UPC, String EAN, String ISBN, String JAN) throws ApiException {
        ApiResponse<ListCatalogItemsResponse> resp = listCatalogItemsWithHttpInfo(marketplaceId, query, queryContextId, sellerSKU, UPC, EAN, ISBN, JAN);
        return resp.getData();
    }

    /**
     * 
     * Effective September 30, 2022, the &#x60;listCatalogItems&#x60; operation will no longer be available in the Selling Partner API for Catalog Items v0. As an alternative, &#x60;searchCatalogItems&#x60; is available in the latest version of the [Selling Partner API for Catalog Items v2022-04-01](doc:catalog-items-api-v2022-04-01-reference). Integrations that rely on the &#x60;listCatalogItems&#x60; operation should migrate to the &#x60;searchCatalogItems&#x60;operation to avoid service disruption.  _Note:_ The [&#x60;listCatalogCategories&#x60;](#get-catalogv0categories) operation is not being deprecated and you can continue to make calls to it.
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned. (required)
     * @param query Keyword(s) to use to search for items in the catalog. Example: &#39;harry potter books&#39;. (optional)
     * @param queryContextId An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items. (optional)
     * @param sellerSKU Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)
     * @param UPC A 12-digit bar code used for retail packaging. (optional)
     * @param EAN A European article number that uniquely identifies the catalog item, manufacturer, and its attributes. (optional)
     * @param ISBN The unique commercial book identifier used to identify books internationally. (optional)
     * @param JAN A Japanese article number that uniquely identifies the product, manufacturer, and its attributes. (optional)
     * @return ApiResponse&lt;ListCatalogItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListCatalogItemsResponse> listCatalogItemsWithHttpInfo(String marketplaceId, String query, String queryContextId, String sellerSKU, String UPC, String EAN, String ISBN, String JAN) throws ApiException {
        com.squareup.okhttp.Call call = listCatalogItemsValidateBeforeCall(marketplaceId, query, queryContextId, sellerSKU, UPC, EAN, ISBN, JAN, null, null);
        Type localVarReturnType = new TypeToken<ListCatalogItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Effective September 30, 2022, the &#x60;listCatalogItems&#x60; operation will no longer be available in the Selling Partner API for Catalog Items v0. As an alternative, &#x60;searchCatalogItems&#x60; is available in the latest version of the [Selling Partner API for Catalog Items v2022-04-01](doc:catalog-items-api-v2022-04-01-reference). Integrations that rely on the &#x60;listCatalogItems&#x60; operation should migrate to the &#x60;searchCatalogItems&#x60;operation to avoid service disruption.  _Note:_ The [&#x60;listCatalogCategories&#x60;](#get-catalogv0categories) operation is not being deprecated and you can continue to make calls to it.
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned. (required)
     * @param query Keyword(s) to use to search for items in the catalog. Example: &#39;harry potter books&#39;. (optional)
     * @param queryContextId An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items. (optional)
     * @param sellerSKU Used to identify an item in the given marketplace. SellerSKU is qualified by the seller&#39;s SellerId, which is included with every operation that you submit. (optional)
     * @param UPC A 12-digit bar code used for retail packaging. (optional)
     * @param EAN A European article number that uniquely identifies the catalog item, manufacturer, and its attributes. (optional)
     * @param ISBN The unique commercial book identifier used to identify books internationally. (optional)
     * @param JAN A Japanese article number that uniquely identifies the product, manufacturer, and its attributes. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCatalogItemsAsync(String marketplaceId, String query, String queryContextId, String sellerSKU, String UPC, String EAN, String ISBN, String JAN, final ApiCallback<ListCatalogItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCatalogItemsValidateBeforeCall(marketplaceId, query, queryContextId, sellerSKU, UPC, EAN, ISBN, JAN, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListCatalogItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public static class Builder {
        private AWSAuthenticationCredentials awsAuthenticationCredentials;
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private AWSAuthenticationCredentialsProvider awsAuthenticationCredentialsProvider;
        private RateLimitConfiguration rateLimitConfiguration;
        private AWSAuthenticationCustomCredentialsProvider awsAuthenticationCustomCredentialsProvider;

        public Builder awsAuthenticationCredentials(AWSAuthenticationCredentials awsAuthenticationCredentials) {
            this.awsAuthenticationCredentials = awsAuthenticationCredentials;
            return this;
        }

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }
        
        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }
		
	   public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }
        
        public Builder awsAuthenticationCredentialsProvider(AWSAuthenticationCredentialsProvider awsAuthenticationCredentialsProvider) {
            this.awsAuthenticationCredentialsProvider = awsAuthenticationCredentialsProvider;
            return this;
        }
        
        public Builder rateLimitConfigurationOnRequests(RateLimitConfiguration rateLimitConfiguration){
            this.rateLimitConfiguration = rateLimitConfiguration;
            return this;
        }
        
        public Builder disableRateLimitOnRequests() {
            this.rateLimitConfiguration = null;
            return this;
        }

        public Builder awsAuthenticationCustomCredentialsProvider(AWSAuthenticationCustomCredentialsProvider awsAuthenticationCustomCredentialsProvider) {
            this.awsAuthenticationCustomCredentialsProvider = awsAuthenticationCustomCredentialsProvider;
            return this;
        }
        

        public CatalogApi build() {
            if (awsAuthenticationCredentials == null && awsAuthenticationCustomCredentialsProvider == null) {
                throw new RuntimeException("Neither AWSAuthenticationCredentials or AWSAuthenticationCustomCredentialsProvider are set");
            }

            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            AWSSigV4Signer awsSigV4Signer;
            if (awsAuthenticationCustomCredentialsProvider != null ) {
                awsSigV4Signer = new AWSSigV4Signer(awsAuthenticationCustomCredentialsProvider);
            }
            else if (awsAuthenticationCredentialsProvider == null) {
                awsSigV4Signer = new AWSSigV4Signer(awsAuthenticationCredentials);
            }
            else {
                awsSigV4Signer = new AWSSigV4Signer(awsAuthenticationCredentials,awsAuthenticationCredentialsProvider);
            }
            
            LWAAuthorizationSigner lwaAuthorizationSigner = null;            
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            }
            else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();                  
                 }
                 lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials,lwaAccessTokenCache);
            }

            return new CatalogApi(new ApiClient()
                .setAWSSigV4Signer(awsSigV4Signer)
                .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                .setBasePath(endpoint)
                .setRateLimiter(rateLimitConfiguration));
        }
    }
}
