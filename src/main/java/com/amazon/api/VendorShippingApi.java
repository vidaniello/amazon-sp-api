/*
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.api;

import com.amazon.invoker.ApiCallback;
import com.amazon.invoker.ApiClient;
import com.amazon.invoker.ApiException;
import com.amazon.invoker.ApiResponse;
import com.amazon.invoker.Configuration;
import com.amazon.invoker.Pair;
import com.amazon.invoker.ProgressRequestBody;
import com.amazon.invoker.ProgressResponseBody;
import com.amazon.invoker.StringUtil;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.amazon.model.vendorshipments.GetShipmentDetailsResponse;
import com.amazon.model.vendorshipments.GetShipmentLabels;
import org.threeten.bp.OffsetDateTime;
import com.amazon.model.vendorshipments.SubmitShipmentConfirmationsRequest;
import com.amazon.model.vendorshipments.SubmitShipmentConfirmationsResponse;
import com.amazon.model.vendorshipments.SubmitShipments;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.amazon.SellingPartnerAPIAA.AWSAuthenticationCredentials;
import com.amazon.SellingPartnerAPIAA.AWSAuthenticationCredentialsProvider;
import com.amazon.SellingPartnerAPIAA.AWSAuthenticationCustomCredentialsProvider;
import com.amazon.SellingPartnerAPIAA.AWSSigV4Signer;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.RateLimitConfiguration;

public class VendorShippingApi {
    private ApiClient apiClient;

    VendorShippingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VendorShippingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getShipmentDetails
     * @param limit The limit to the number of records returned. Default value is 50 records. (optional)
     * @param sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param nextToken Used for pagination when there are more shipments than the specified result size limit. (optional)
     * @param createdAfter Get Shipment Details that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param createdBefore Get Shipment Details that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentConfirmedBefore Get Shipment Details by passing Shipment confirmed create Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentConfirmedAfter Get Shipment Details by passing Shipment confirmed create Date After. Must be in ISO-8601 date/time format. (optional)
     * @param packageLabelCreatedBefore Get Shipment Details by passing Package label create Date by buyer. Must be in ISO-8601 date/time format. (optional)
     * @param packageLabelCreatedAfter Get Shipment Details by passing Package label create Date After by buyer. Must be in ISO-8601 date/time format. (optional)
     * @param shippedBefore Get Shipment Details by passing Shipped Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shippedAfter Get Shipment Details by passing Shipped Date After. Must be in ISO-8601 date/time format. (optional)
     * @param estimatedDeliveryBefore Get Shipment Details by passing Estimated Delivery Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param estimatedDeliveryAfter Get Shipment Details by passing Estimated Delivery Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentDeliveryBefore Get Shipment Details by passing Shipment Delivery Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentDeliveryAfter Get Shipment Details by passing Shipment Delivery Date After. Must be in ISO-8601 date/time format. (optional)
     * @param requestedPickUpBefore Get Shipment Details by passing Before Requested pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param requestedPickUpAfter Get Shipment Details by passing After Requested pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param scheduledPickUpBefore Get Shipment Details by passing Before scheduled pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param scheduledPickUpAfter Get Shipment Details by passing After Scheduled pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param currentShipmentStatus Get Shipment Details by passing Current shipment status. (optional)
     * @param vendorShipmentIdentifier Get Shipment Details by passing Vendor Shipment ID (optional)
     * @param buyerReferenceNumber Get Shipment Details by passing buyer Reference ID (optional)
     * @param buyerWarehouseCode Get Shipping Details based on buyer warehouse code. This value should be same as &#39;shipToParty.partyId&#39; in the Shipment. (optional)
     * @param sellerWarehouseCode Get Shipping Details based on vendor warehouse code. This value should be same as &#39;sellingParty.partyId&#39; in the Shipment. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShipmentDetailsCall(Long limit, String sortOrder, String nextToken, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime shipmentConfirmedBefore, OffsetDateTime shipmentConfirmedAfter, OffsetDateTime packageLabelCreatedBefore, OffsetDateTime packageLabelCreatedAfter, OffsetDateTime shippedBefore, OffsetDateTime shippedAfter, OffsetDateTime estimatedDeliveryBefore, OffsetDateTime estimatedDeliveryAfter, OffsetDateTime shipmentDeliveryBefore, OffsetDateTime shipmentDeliveryAfter, OffsetDateTime requestedPickUpBefore, OffsetDateTime requestedPickUpAfter, OffsetDateTime scheduledPickUpBefore, OffsetDateTime scheduledPickUpAfter, String currentShipmentStatus, String vendorShipmentIdentifier, String buyerReferenceNumber, String buyerWarehouseCode, String sellerWarehouseCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/shipping/v1/shipments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (nextToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (shipmentConfirmedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipmentConfirmedBefore", shipmentConfirmedBefore));
        if (shipmentConfirmedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipmentConfirmedAfter", shipmentConfirmedAfter));
        if (packageLabelCreatedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("packageLabelCreatedBefore", packageLabelCreatedBefore));
        if (packageLabelCreatedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("packageLabelCreatedAfter", packageLabelCreatedAfter));
        if (shippedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shippedBefore", shippedBefore));
        if (shippedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shippedAfter", shippedAfter));
        if (estimatedDeliveryBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("estimatedDeliveryBefore", estimatedDeliveryBefore));
        if (estimatedDeliveryAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("estimatedDeliveryAfter", estimatedDeliveryAfter));
        if (shipmentDeliveryBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipmentDeliveryBefore", shipmentDeliveryBefore));
        if (shipmentDeliveryAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipmentDeliveryAfter", shipmentDeliveryAfter));
        if (requestedPickUpBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requestedPickUpBefore", requestedPickUpBefore));
        if (requestedPickUpAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requestedPickUpAfter", requestedPickUpAfter));
        if (scheduledPickUpBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scheduledPickUpBefore", scheduledPickUpBefore));
        if (scheduledPickUpAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scheduledPickUpAfter", scheduledPickUpAfter));
        if (currentShipmentStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currentShipmentStatus", currentShipmentStatus));
        if (vendorShipmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vendorShipmentIdentifier", vendorShipmentIdentifier));
        if (buyerReferenceNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("buyerReferenceNumber", buyerReferenceNumber));
        if (buyerWarehouseCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("buyerWarehouseCode", buyerWarehouseCode));
        if (sellerWarehouseCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sellerWarehouseCode", sellerWarehouseCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getShipmentDetailsValidateBeforeCall(Long limit, String sortOrder, String nextToken, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime shipmentConfirmedBefore, OffsetDateTime shipmentConfirmedAfter, OffsetDateTime packageLabelCreatedBefore, OffsetDateTime packageLabelCreatedAfter, OffsetDateTime shippedBefore, OffsetDateTime shippedAfter, OffsetDateTime estimatedDeliveryBefore, OffsetDateTime estimatedDeliveryAfter, OffsetDateTime shipmentDeliveryBefore, OffsetDateTime shipmentDeliveryAfter, OffsetDateTime requestedPickUpBefore, OffsetDateTime requestedPickUpAfter, OffsetDateTime scheduledPickUpBefore, OffsetDateTime scheduledPickUpAfter, String currentShipmentStatus, String vendorShipmentIdentifier, String buyerReferenceNumber, String buyerWarehouseCode, String sellerWarehouseCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getShipmentDetailsCall(limit, sortOrder, nextToken, createdAfter, createdBefore, shipmentConfirmedBefore, shipmentConfirmedAfter, packageLabelCreatedBefore, packageLabelCreatedAfter, shippedBefore, shippedAfter, estimatedDeliveryBefore, estimatedDeliveryAfter, shipmentDeliveryBefore, shipmentDeliveryAfter, requestedPickUpBefore, requestedPickUpAfter, scheduledPickUpBefore, scheduledPickUpAfter, currentShipmentStatus, vendorShipmentIdentifier, buyerReferenceNumber, buyerWarehouseCode, sellerWarehouseCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the Details about Shipment, Carrier Details,  status of the shipment, container details and other details related to shipment based on the filter parameters value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param limit The limit to the number of records returned. Default value is 50 records. (optional)
     * @param sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param nextToken Used for pagination when there are more shipments than the specified result size limit. (optional)
     * @param createdAfter Get Shipment Details that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param createdBefore Get Shipment Details that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentConfirmedBefore Get Shipment Details by passing Shipment confirmed create Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentConfirmedAfter Get Shipment Details by passing Shipment confirmed create Date After. Must be in ISO-8601 date/time format. (optional)
     * @param packageLabelCreatedBefore Get Shipment Details by passing Package label create Date by buyer. Must be in ISO-8601 date/time format. (optional)
     * @param packageLabelCreatedAfter Get Shipment Details by passing Package label create Date After by buyer. Must be in ISO-8601 date/time format. (optional)
     * @param shippedBefore Get Shipment Details by passing Shipped Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shippedAfter Get Shipment Details by passing Shipped Date After. Must be in ISO-8601 date/time format. (optional)
     * @param estimatedDeliveryBefore Get Shipment Details by passing Estimated Delivery Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param estimatedDeliveryAfter Get Shipment Details by passing Estimated Delivery Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentDeliveryBefore Get Shipment Details by passing Shipment Delivery Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentDeliveryAfter Get Shipment Details by passing Shipment Delivery Date After. Must be in ISO-8601 date/time format. (optional)
     * @param requestedPickUpBefore Get Shipment Details by passing Before Requested pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param requestedPickUpAfter Get Shipment Details by passing After Requested pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param scheduledPickUpBefore Get Shipment Details by passing Before scheduled pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param scheduledPickUpAfter Get Shipment Details by passing After Scheduled pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param currentShipmentStatus Get Shipment Details by passing Current shipment status. (optional)
     * @param vendorShipmentIdentifier Get Shipment Details by passing Vendor Shipment ID (optional)
     * @param buyerReferenceNumber Get Shipment Details by passing buyer Reference ID (optional)
     * @param buyerWarehouseCode Get Shipping Details based on buyer warehouse code. This value should be same as &#39;shipToParty.partyId&#39; in the Shipment. (optional)
     * @param sellerWarehouseCode Get Shipping Details based on vendor warehouse code. This value should be same as &#39;sellingParty.partyId&#39; in the Shipment. (optional)
     * @return GetShipmentDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetShipmentDetailsResponse getShipmentDetails(Long limit, String sortOrder, String nextToken, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime shipmentConfirmedBefore, OffsetDateTime shipmentConfirmedAfter, OffsetDateTime packageLabelCreatedBefore, OffsetDateTime packageLabelCreatedAfter, OffsetDateTime shippedBefore, OffsetDateTime shippedAfter, OffsetDateTime estimatedDeliveryBefore, OffsetDateTime estimatedDeliveryAfter, OffsetDateTime shipmentDeliveryBefore, OffsetDateTime shipmentDeliveryAfter, OffsetDateTime requestedPickUpBefore, OffsetDateTime requestedPickUpAfter, OffsetDateTime scheduledPickUpBefore, OffsetDateTime scheduledPickUpAfter, String currentShipmentStatus, String vendorShipmentIdentifier, String buyerReferenceNumber, String buyerWarehouseCode, String sellerWarehouseCode) throws ApiException {
        ApiResponse<GetShipmentDetailsResponse> resp = getShipmentDetailsWithHttpInfo(limit, sortOrder, nextToken, createdAfter, createdBefore, shipmentConfirmedBefore, shipmentConfirmedAfter, packageLabelCreatedBefore, packageLabelCreatedAfter, shippedBefore, shippedAfter, estimatedDeliveryBefore, estimatedDeliveryAfter, shipmentDeliveryBefore, shipmentDeliveryAfter, requestedPickUpBefore, requestedPickUpAfter, scheduledPickUpBefore, scheduledPickUpAfter, currentShipmentStatus, vendorShipmentIdentifier, buyerReferenceNumber, buyerWarehouseCode, sellerWarehouseCode);
        return resp.getData();
    }

    /**
     * 
     * Returns the Details about Shipment, Carrier Details,  status of the shipment, container details and other details related to shipment based on the filter parameters value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param limit The limit to the number of records returned. Default value is 50 records. (optional)
     * @param sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param nextToken Used for pagination when there are more shipments than the specified result size limit. (optional)
     * @param createdAfter Get Shipment Details that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param createdBefore Get Shipment Details that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentConfirmedBefore Get Shipment Details by passing Shipment confirmed create Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentConfirmedAfter Get Shipment Details by passing Shipment confirmed create Date After. Must be in ISO-8601 date/time format. (optional)
     * @param packageLabelCreatedBefore Get Shipment Details by passing Package label create Date by buyer. Must be in ISO-8601 date/time format. (optional)
     * @param packageLabelCreatedAfter Get Shipment Details by passing Package label create Date After by buyer. Must be in ISO-8601 date/time format. (optional)
     * @param shippedBefore Get Shipment Details by passing Shipped Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shippedAfter Get Shipment Details by passing Shipped Date After. Must be in ISO-8601 date/time format. (optional)
     * @param estimatedDeliveryBefore Get Shipment Details by passing Estimated Delivery Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param estimatedDeliveryAfter Get Shipment Details by passing Estimated Delivery Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentDeliveryBefore Get Shipment Details by passing Shipment Delivery Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentDeliveryAfter Get Shipment Details by passing Shipment Delivery Date After. Must be in ISO-8601 date/time format. (optional)
     * @param requestedPickUpBefore Get Shipment Details by passing Before Requested pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param requestedPickUpAfter Get Shipment Details by passing After Requested pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param scheduledPickUpBefore Get Shipment Details by passing Before scheduled pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param scheduledPickUpAfter Get Shipment Details by passing After Scheduled pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param currentShipmentStatus Get Shipment Details by passing Current shipment status. (optional)
     * @param vendorShipmentIdentifier Get Shipment Details by passing Vendor Shipment ID (optional)
     * @param buyerReferenceNumber Get Shipment Details by passing buyer Reference ID (optional)
     * @param buyerWarehouseCode Get Shipping Details based on buyer warehouse code. This value should be same as &#39;shipToParty.partyId&#39; in the Shipment. (optional)
     * @param sellerWarehouseCode Get Shipping Details based on vendor warehouse code. This value should be same as &#39;sellingParty.partyId&#39; in the Shipment. (optional)
     * @return ApiResponse&lt;GetShipmentDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetShipmentDetailsResponse> getShipmentDetailsWithHttpInfo(Long limit, String sortOrder, String nextToken, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime shipmentConfirmedBefore, OffsetDateTime shipmentConfirmedAfter, OffsetDateTime packageLabelCreatedBefore, OffsetDateTime packageLabelCreatedAfter, OffsetDateTime shippedBefore, OffsetDateTime shippedAfter, OffsetDateTime estimatedDeliveryBefore, OffsetDateTime estimatedDeliveryAfter, OffsetDateTime shipmentDeliveryBefore, OffsetDateTime shipmentDeliveryAfter, OffsetDateTime requestedPickUpBefore, OffsetDateTime requestedPickUpAfter, OffsetDateTime scheduledPickUpBefore, OffsetDateTime scheduledPickUpAfter, String currentShipmentStatus, String vendorShipmentIdentifier, String buyerReferenceNumber, String buyerWarehouseCode, String sellerWarehouseCode) throws ApiException {
        com.squareup.okhttp.Call call = getShipmentDetailsValidateBeforeCall(limit, sortOrder, nextToken, createdAfter, createdBefore, shipmentConfirmedBefore, shipmentConfirmedAfter, packageLabelCreatedBefore, packageLabelCreatedAfter, shippedBefore, shippedAfter, estimatedDeliveryBefore, estimatedDeliveryAfter, shipmentDeliveryBefore, shipmentDeliveryAfter, requestedPickUpBefore, requestedPickUpAfter, scheduledPickUpBefore, scheduledPickUpAfter, currentShipmentStatus, vendorShipmentIdentifier, buyerReferenceNumber, buyerWarehouseCode, sellerWarehouseCode, null, null);
        Type localVarReturnType = new TypeToken<GetShipmentDetailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the Details about Shipment, Carrier Details,  status of the shipment, container details and other details related to shipment based on the filter parameters value that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param limit The limit to the number of records returned. Default value is 50 records. (optional)
     * @param sortOrder Sort in ascending or descending order by purchase order creation date. (optional)
     * @param nextToken Used for pagination when there are more shipments than the specified result size limit. (optional)
     * @param createdAfter Get Shipment Details that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param createdBefore Get Shipment Details that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentConfirmedBefore Get Shipment Details by passing Shipment confirmed create Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentConfirmedAfter Get Shipment Details by passing Shipment confirmed create Date After. Must be in ISO-8601 date/time format. (optional)
     * @param packageLabelCreatedBefore Get Shipment Details by passing Package label create Date by buyer. Must be in ISO-8601 date/time format. (optional)
     * @param packageLabelCreatedAfter Get Shipment Details by passing Package label create Date After by buyer. Must be in ISO-8601 date/time format. (optional)
     * @param shippedBefore Get Shipment Details by passing Shipped Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shippedAfter Get Shipment Details by passing Shipped Date After. Must be in ISO-8601 date/time format. (optional)
     * @param estimatedDeliveryBefore Get Shipment Details by passing Estimated Delivery Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param estimatedDeliveryAfter Get Shipment Details by passing Estimated Delivery Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentDeliveryBefore Get Shipment Details by passing Shipment Delivery Date Before. Must be in ISO-8601 date/time format. (optional)
     * @param shipmentDeliveryAfter Get Shipment Details by passing Shipment Delivery Date After. Must be in ISO-8601 date/time format. (optional)
     * @param requestedPickUpBefore Get Shipment Details by passing Before Requested pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param requestedPickUpAfter Get Shipment Details by passing After Requested pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param scheduledPickUpBefore Get Shipment Details by passing Before scheduled pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param scheduledPickUpAfter Get Shipment Details by passing After Scheduled pickup date. Must be in ISO-8601 date/time format. (optional)
     * @param currentShipmentStatus Get Shipment Details by passing Current shipment status. (optional)
     * @param vendorShipmentIdentifier Get Shipment Details by passing Vendor Shipment ID (optional)
     * @param buyerReferenceNumber Get Shipment Details by passing buyer Reference ID (optional)
     * @param buyerWarehouseCode Get Shipping Details based on buyer warehouse code. This value should be same as &#39;shipToParty.partyId&#39; in the Shipment. (optional)
     * @param sellerWarehouseCode Get Shipping Details based on vendor warehouse code. This value should be same as &#39;sellingParty.partyId&#39; in the Shipment. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShipmentDetailsAsync(Long limit, String sortOrder, String nextToken, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime shipmentConfirmedBefore, OffsetDateTime shipmentConfirmedAfter, OffsetDateTime packageLabelCreatedBefore, OffsetDateTime packageLabelCreatedAfter, OffsetDateTime shippedBefore, OffsetDateTime shippedAfter, OffsetDateTime estimatedDeliveryBefore, OffsetDateTime estimatedDeliveryAfter, OffsetDateTime shipmentDeliveryBefore, OffsetDateTime shipmentDeliveryAfter, OffsetDateTime requestedPickUpBefore, OffsetDateTime requestedPickUpAfter, OffsetDateTime scheduledPickUpBefore, OffsetDateTime scheduledPickUpAfter, String currentShipmentStatus, String vendorShipmentIdentifier, String buyerReferenceNumber, String buyerWarehouseCode, String sellerWarehouseCode, final ApiCallback<GetShipmentDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShipmentDetailsValidateBeforeCall(limit, sortOrder, nextToken, createdAfter, createdBefore, shipmentConfirmedBefore, shipmentConfirmedAfter, packageLabelCreatedBefore, packageLabelCreatedAfter, shippedBefore, shippedAfter, estimatedDeliveryBefore, estimatedDeliveryAfter, shipmentDeliveryBefore, shipmentDeliveryAfter, requestedPickUpBefore, requestedPickUpAfter, scheduledPickUpBefore, scheduledPickUpAfter, currentShipmentStatus, vendorShipmentIdentifier, buyerReferenceNumber, buyerWarehouseCode, sellerWarehouseCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetShipmentDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getShipmentLabels
     * @param limit The limit to the number of records returned. Default value is 50 records. (optional)
     * @param sortOrder Sort in ascending or descending order by transport label creation date. (optional)
     * @param nextToken Used for pagination when there are more transport label than the specified result size limit. (optional)
     * @param labelCreatedAfter transport Labels that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param labelcreatedBefore transport Labels that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param buyerReferenceNumber Get transport labels by passing Buyer Reference Number to retreive the corresponding transport label. (optional)
     * @param vendorShipmentIdentifier Get transport labels by passing Vendor Shipment ID to retreive the corresponding transport label. (optional)
     * @param sellerWarehouseCode Get Shipping labels based Vendor Warehouse code. This value should be same as &#39;shipFromParty.partyId&#39; in the Shipment. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShipmentLabelsCall(Long limit, String sortOrder, String nextToken, OffsetDateTime labelCreatedAfter, OffsetDateTime labelcreatedBefore, String buyerReferenceNumber, String vendorShipmentIdentifier, String sellerWarehouseCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/shipping/v1/transportLabels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (nextToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));
        if (labelCreatedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("labelCreatedAfter", labelCreatedAfter));
        if (labelcreatedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("labelcreatedBefore", labelcreatedBefore));
        if (buyerReferenceNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("buyerReferenceNumber", buyerReferenceNumber));
        if (vendorShipmentIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vendorShipmentIdentifier", vendorShipmentIdentifier));
        if (sellerWarehouseCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sellerWarehouseCode", sellerWarehouseCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getShipmentLabelsValidateBeforeCall(Long limit, String sortOrder, String nextToken, OffsetDateTime labelCreatedAfter, OffsetDateTime labelcreatedBefore, String buyerReferenceNumber, String vendorShipmentIdentifier, String sellerWarehouseCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getShipmentLabelsCall(limit, sortOrder, nextToken, labelCreatedAfter, labelcreatedBefore, buyerReferenceNumber, vendorShipmentIdentifier, sellerWarehouseCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns transport Labels based on the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param limit The limit to the number of records returned. Default value is 50 records. (optional)
     * @param sortOrder Sort in ascending or descending order by transport label creation date. (optional)
     * @param nextToken Used for pagination when there are more transport label than the specified result size limit. (optional)
     * @param labelCreatedAfter transport Labels that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param labelcreatedBefore transport Labels that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param buyerReferenceNumber Get transport labels by passing Buyer Reference Number to retreive the corresponding transport label. (optional)
     * @param vendorShipmentIdentifier Get transport labels by passing Vendor Shipment ID to retreive the corresponding transport label. (optional)
     * @param sellerWarehouseCode Get Shipping labels based Vendor Warehouse code. This value should be same as &#39;shipFromParty.partyId&#39; in the Shipment. (optional)
     * @return GetShipmentLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetShipmentLabels getShipmentLabels(Long limit, String sortOrder, String nextToken, OffsetDateTime labelCreatedAfter, OffsetDateTime labelcreatedBefore, String buyerReferenceNumber, String vendorShipmentIdentifier, String sellerWarehouseCode) throws ApiException {
        ApiResponse<GetShipmentLabels> resp = getShipmentLabelsWithHttpInfo(limit, sortOrder, nextToken, labelCreatedAfter, labelcreatedBefore, buyerReferenceNumber, vendorShipmentIdentifier, sellerWarehouseCode);
        return resp.getData();
    }

    /**
     * 
     * Returns transport Labels based on the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param limit The limit to the number of records returned. Default value is 50 records. (optional)
     * @param sortOrder Sort in ascending or descending order by transport label creation date. (optional)
     * @param nextToken Used for pagination when there are more transport label than the specified result size limit. (optional)
     * @param labelCreatedAfter transport Labels that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param labelcreatedBefore transport Labels that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param buyerReferenceNumber Get transport labels by passing Buyer Reference Number to retreive the corresponding transport label. (optional)
     * @param vendorShipmentIdentifier Get transport labels by passing Vendor Shipment ID to retreive the corresponding transport label. (optional)
     * @param sellerWarehouseCode Get Shipping labels based Vendor Warehouse code. This value should be same as &#39;shipFromParty.partyId&#39; in the Shipment. (optional)
     * @return ApiResponse&lt;GetShipmentLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetShipmentLabels> getShipmentLabelsWithHttpInfo(Long limit, String sortOrder, String nextToken, OffsetDateTime labelCreatedAfter, OffsetDateTime labelcreatedBefore, String buyerReferenceNumber, String vendorShipmentIdentifier, String sellerWarehouseCode) throws ApiException {
        com.squareup.okhttp.Call call = getShipmentLabelsValidateBeforeCall(limit, sortOrder, nextToken, labelCreatedAfter, labelcreatedBefore, buyerReferenceNumber, vendorShipmentIdentifier, sellerWarehouseCode, null, null);
        Type localVarReturnType = new TypeToken<GetShipmentLabels>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns transport Labels based on the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param limit The limit to the number of records returned. Default value is 50 records. (optional)
     * @param sortOrder Sort in ascending or descending order by transport label creation date. (optional)
     * @param nextToken Used for pagination when there are more transport label than the specified result size limit. (optional)
     * @param labelCreatedAfter transport Labels that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param labelcreatedBefore transport Labels that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format. (optional)
     * @param buyerReferenceNumber Get transport labels by passing Buyer Reference Number to retreive the corresponding transport label. (optional)
     * @param vendorShipmentIdentifier Get transport labels by passing Vendor Shipment ID to retreive the corresponding transport label. (optional)
     * @param sellerWarehouseCode Get Shipping labels based Vendor Warehouse code. This value should be same as &#39;shipFromParty.partyId&#39; in the Shipment. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShipmentLabelsAsync(Long limit, String sortOrder, String nextToken, OffsetDateTime labelCreatedAfter, OffsetDateTime labelcreatedBefore, String buyerReferenceNumber, String vendorShipmentIdentifier, String sellerWarehouseCode, final ApiCallback<GetShipmentLabels> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShipmentLabelsValidateBeforeCall(limit, sortOrder, nextToken, labelCreatedAfter, labelcreatedBefore, buyerReferenceNumber, vendorShipmentIdentifier, sellerWarehouseCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetShipmentLabels>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submitShipmentConfirmations
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submitShipmentConfirmationsCall(SubmitShipmentConfirmationsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vendor/shipping/v1/shipmentConfirmations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submitShipmentConfirmationsValidateBeforeCall(SubmitShipmentConfirmationsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling submitShipmentConfirmations(Async)");
        }
        

        com.squareup.okhttp.Call call = submitShipmentConfirmationsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Submits one or more shipment confirmations for vendor orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param body  (required)
     * @return SubmitShipmentConfirmationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubmitShipmentConfirmationsResponse submitShipmentConfirmations(SubmitShipmentConfirmationsRequest body) throws ApiException {
        ApiResponse<SubmitShipmentConfirmationsResponse> resp = submitShipmentConfirmationsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Submits one or more shipment confirmations for vendor orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param body  (required)
     * @return ApiResponse&lt;SubmitShipmentConfirmationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubmitShipmentConfirmationsResponse> submitShipmentConfirmationsWithHttpInfo(SubmitShipmentConfirmationsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = submitShipmentConfirmationsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<SubmitShipmentConfirmationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submits one or more shipment confirmations for vendor orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitShipmentConfirmationsAsync(SubmitShipmentConfirmationsRequest body, final ApiCallback<SubmitShipmentConfirmationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitShipmentConfirmationsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubmitShipmentConfirmationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submitShipments
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submitShipmentsCall(SubmitShipments body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vendor/shipping/v1/shipments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submitShipmentsValidateBeforeCall(SubmitShipments body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling submitShipments(Async)");
        }
        

        com.squareup.okhttp.Call call = submitShipmentsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Submits one or more shipment request for vendor Orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param body  (required)
     * @return SubmitShipmentConfirmationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubmitShipmentConfirmationsResponse submitShipments(SubmitShipments body) throws ApiException {
        ApiResponse<SubmitShipmentConfirmationsResponse> resp = submitShipmentsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Submits one or more shipment request for vendor Orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param body  (required)
     * @return ApiResponse&lt;SubmitShipmentConfirmationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubmitShipmentConfirmationsResponse> submitShipmentsWithHttpInfo(SubmitShipments body) throws ApiException {
        com.squareup.okhttp.Call call = submitShipmentsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<SubmitShipmentConfirmationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submits one or more shipment request for vendor Orders.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitShipmentsAsync(SubmitShipments body, final ApiCallback<SubmitShipmentConfirmationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitShipmentsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubmitShipmentConfirmationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    public static class Builder {
        private AWSAuthenticationCredentials awsAuthenticationCredentials;
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private AWSAuthenticationCredentialsProvider awsAuthenticationCredentialsProvider;
        private RateLimitConfiguration rateLimitConfiguration;
        private AWSAuthenticationCustomCredentialsProvider awsAuthenticationCustomCredentialsProvider;

        public Builder awsAuthenticationCredentials(AWSAuthenticationCredentials awsAuthenticationCredentials) {
            this.awsAuthenticationCredentials = awsAuthenticationCredentials;
            return this;
        }

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }
        
        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }
		
	   public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }
        
        public Builder awsAuthenticationCredentialsProvider(AWSAuthenticationCredentialsProvider awsAuthenticationCredentialsProvider) {
            this.awsAuthenticationCredentialsProvider = awsAuthenticationCredentialsProvider;
            return this;
        }
        
        public Builder rateLimitConfigurationOnRequests(RateLimitConfiguration rateLimitConfiguration){
            this.rateLimitConfiguration = rateLimitConfiguration;
            return this;
        }
        
        public Builder disableRateLimitOnRequests() {
            this.rateLimitConfiguration = null;
            return this;
        }

        public Builder awsAuthenticationCustomCredentialsProvider(AWSAuthenticationCustomCredentialsProvider awsAuthenticationCustomCredentialsProvider) {
            this.awsAuthenticationCustomCredentialsProvider = awsAuthenticationCustomCredentialsProvider;
            return this;
        }
        

        public VendorShippingApi build() {
            if (awsAuthenticationCredentials == null && awsAuthenticationCustomCredentialsProvider == null) {
                throw new RuntimeException("Neither AWSAuthenticationCredentials or AWSAuthenticationCustomCredentialsProvider are set");
            }

            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            AWSSigV4Signer awsSigV4Signer;
            if (awsAuthenticationCustomCredentialsProvider != null ) {
                awsSigV4Signer = new AWSSigV4Signer(awsAuthenticationCustomCredentialsProvider);
            }
            else if (awsAuthenticationCredentialsProvider == null) {
                awsSigV4Signer = new AWSSigV4Signer(awsAuthenticationCredentials);
            }
            else {
                awsSigV4Signer = new AWSSigV4Signer(awsAuthenticationCredentials,awsAuthenticationCredentialsProvider);
            }
            
            LWAAuthorizationSigner lwaAuthorizationSigner = null;            
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            }
            else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();                  
                 }
                 lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials,lwaAccessTokenCache);
            }

            return new VendorShippingApi(new ApiClient()
                .setAWSSigV4Signer(awsSigV4Signer)
                .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                .setBasePath(endpoint)
                .setRateLimiter(rateLimitConfiguration));
        }
    }
}
